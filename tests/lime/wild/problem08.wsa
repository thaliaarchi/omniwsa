    /*
        Program to solve the second Euler problem:
        Larges product in a series @
        https://projecteuler.net/problem=8
    */

    /*
        7316717653 1330624919 2251196744 2657474235 5349194934
        9698352031 2774506326 2395783180 1698480186 9478851843
        
        8586156078 9112949495 4595017379 5833195285 3208805511
        1254069874 7158523863 0507156932 9096329522 7443043557
        
        6689664895 0445244523 1617318564 0309871112 1722383113
        6222989342 3380308135 3362766142 8280644448 6645238749
        
        3035890729 6290491560 4407723907 1381051585 9307960866
        7017242712 1883998797 9087922749 2190169972 0888093776
        
        6572733300 1053367881 2202354218 0975125454 0594752243
        5258490771 1670556013 6048395864 4670632441 5722155397
        
        5369781797 7846174064 9551492908 6256932197 8468622482
        8397224137 5657056057 4902614079 7296865241 4535100474
        
        8216637048 4403199890 0088952434 5065854122 7588666881
        1642717147 9924442928 2308634656 7481391912 3162824586
        
        1786645835 9124566529 4765456828 4891288314 2607690042
        2421902267 1055626321 1111093705 4421750694 1658960408
        
        0719840385 0962455444 3629812309 8787992724 4284909188
        8458015616 6097919133 8754992005 2406368991 2560717606
        
        0588611646 7109405077 5410022569 8315520005 5935729725
        7163626956 1882670428 2524836008 2325753042 0752963450
    */

    macro index_counter_loc [0]
    macro largest_loc [1]
    macro start_of_number [2]
    macro step_number [13]
    macro size_of_number [10]
    macro total_size_of_number [1000]
    macro base [10]
    
    
    push index_counter_loc
    push start_of_number
    store
    
    push largest_loc
    push 1
    store
    
    push 7316717653 call .add_num push 1330624919 call .add_num 
    push 2251196744 call .add_num 
    push 2657474235 call .add_num push 5349194934 call .add_num 
    push 9698352031 call .add_num push 2774506326 call .add_num 
    push 2395783180 call .add_num 
    push 1698480186 call .add_num push 9478851843 call .add_num
    
    push 8586156078 call .add_num push 9112949495 call .add_num 
    push 4595017379 call .add_num 
    push 5833195285 call .add_num push 3208805511 call .add_num
    push 1254069874 call .add_num push 7158523863 call .add_num 
    push 0507156932 call .add_num 
    push 9096329522 call .add_num push 7443043557 call .add_num
    
    push 6689664895 call .add_num push 0445244523 call .add_num 
    push 1617318564 call .add_num 
    push 0309871112 call .add_num push 1722383113 call .add_num
    push 6222989342 call .add_num push 3380308135 call .add_num 
    push 3362766142 call .add_num 
    push 8280644448 call .add_num push 6645238749 call .add_num
    
    push 3035890729 call .add_num push 6290491560 call .add_num 
    push 4407723907 call .add_num 
    push 1381051585 call .add_num push 9307960866 call .add_num
    push 7017242712 call .add_num push 1883998797 call .add_num 
    push 9087922749 call .add_num 
    push 2190169972 call .add_num push 0888093776 call .add_num
    
    push 6572733300 call .add_num push 1053367881 call .add_num 
    push 2202354218 call .add_num 
    push 0975125454 call .add_num push 0594752243 call .add_num
    push 5258490771 call .add_num push 1670556013 call .add_num 
    push 6048395864 call .add_num 
    push 4670632441 call .add_num push 5722155397 call .add_num
    
    push 5369781797 call .add_num push 7846174064 call .add_num 
    push 9551492908 call .add_num 
    push 6256932197 call .add_num push 8468622482 call .add_num
    push 8397224137 call .add_num push 5657056057 call .add_num 
    push 4902614079 call .add_num 
    push 7296865241 call .add_num push 4535100474 call .add_num
    
    push 8216637048 call .add_num push 4403199890 call .add_num 
    push 0088952434 call .add_num 
    push 5065854122 call .add_num push 7588666881 call .add_num
    push 1642717147 call .add_num push 9924442928 call .add_num 
    push 2308634656 call .add_num 
    push 7481391912 call .add_num push 3162824586 call .add_num
    
    push 1786645835 call .add_num push 9124566529 call .add_num 
    push 4765456828 call .add_num 
    push 4891288314 call .add_num push 2607690042 call .add_num
    push 2421902267 call .add_num push 1055626321 call .add_num 
    push 1111093705 call .add_num 
    push 4421750694 call .add_num push 1658960408 call .add_num
    
    push 0719840385 call .add_num push 0962455444 call .add_num 
    push 3629812309 call .add_num 
    push 8787992724 call .add_num push 4284909188 call .add_num
    push 8458015616 call .add_num push 6097919133 call .add_num 
    push 8754992005 call .add_num 
    push 2406368991 call .add_num push 2560717606 call .add_num
    
    push 0588611646 call .add_num push 7109405077 call .add_num 
    push 5410022569 call .add_num 
    push 8315520005 call .add_num push 5935729725 call .add_num
    push 7163626956 call .add_num push 1882670428 call .add_num 
    push 2524836008 call .add_num 
    push 2325753042 call .add_num push 0752963450 call .add_num

    push 0
    push step_number
    push index_counter_loc
    push 1
    store
    
    
    ; 0 4 0
.loop:
    dupe
    copy 2
    sub
    jz .end_loop
    copy 1
    push size_of_number
    div
    push start_of_number
    add 
    fetch
    copy 2
    push size_of_number
    mod
    push 9
    swap 
    sub 
    push base
    swap
    call .to_the_power_of
    div 
    push 10
    mod
    push index_counter_loc
    fetch 
    mul 
    push index_counter_loc
    swap 
    store
    swap 
    push 1
    add 
    swap
    jmp .loop
    
.end_loop:
    push largest_loc
    fetch
    push index_counter_loc
    fetch 
    sub
    jn .store_new_largest
    
.cmp_while:
    push 1
    add 
    swap 
    drop 
    dupe
    push step_number
    sub
    swap
    push index_counter_loc
    push 1
    store
    dupe 
    push total_size_of_number
    sub
    jn .loop
    jmp .end
    
    
.store_new_largest:
    push largest_loc
    push index_counter_loc
    fetch
    store 
    jmp .cmp_while
    
    
    
.add_num:
    push index_counter_loc
    fetch
    dupe
    copy 2
    store 
    push 1
    add
    push index_counter_loc
    swap
    store
    drop
    ret
    

.to_the_power_of:
    push 1
    sub 
    dupe
    dupe
    jn .ret_one
    jz .ret_pow_one
    copy 1 
    dupe 
.to_the_power_of_loop:
    mul
    swap 
    push 1
    sub
    dupe 
    jz .ret_power
    swap 
    copy 2
    jmp .to_the_power_of_loop
    
.ret_power:
    drop 
    swap
    drop 
    ret
    
.ret_pow_one:
    drop 
    ret
    
.ret_one:
    drop
    drop
    drop
    push 1
    ret
    
.end:
    push largest_loc
    fetch 
    printi
    end