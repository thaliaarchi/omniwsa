# Key:
# - mnemo: mnemonic
# - val: integer, char, or string literal
# - lbldef: label definition
# - lblref: label reference
# - comma: argument separator
# - slash: instruction separator
# - space: space
# - LF: line terminator
# - lcomment: line comment
# - EOF: end of file
# - unk: unrecognized bytes
#
# A double-circled node emits an instruction or empty node, instead of denoting
# a traditional accept state. Red indicates an erroneous token. Orange indicates
# a conditionally erroneous token.

# TODO:
# - Separator handling after an instruction is incomplete.
# - Treat a line comment as a space between arguments only when it would produce
#   a valid instruction. Otherwise, treat it as a valid instruction separator
#   mark the error in the instruction.
# - Allow interchanging label defs and refs in both positions, e.g.,
#   `%l call @l / %l` => `@l call %l / @l` with errors on respective tokens.
#   This should probably be handled after parsing. Switch % => @ for labels
#   that are not already @-defined. Next, switch @ => % for labels that are
#   defined and not already switched.

digraph palaiologos_parser {
  compund=true;

  start [shape=none];
  a [shape=circle];
  start -> a;

  subgraph cluster_initial_maybelf {
    label="Initial MaybeLF"
    a0 [shape=circle];
    b [shape=circle];
    c [shape=circle];
    c2 [shape=circle];
    d [shape=doublecircle];
    e [shape=circle];
    a -> a0 [label=ε];
    a0 -> a0 [label=space];
    a0 -> b [label=slash];
    a0 -> c [label=ε];
    b -> c [label=ε];
    c -> c [label=space];
    c -> b [label=slash];
    c -> c2 [label=<LF<br/>EOF>];
    c2 -> d [label=<ε<br/>EOF>];
    c -> e [label=lcomment];
    d -> a [label=ε];
    e -> c2 [label=LF];
    e -> d [label=EOF, fontcolor=red];
  }

  k [shape=doublecircle];
  b -> k [label=ε];
  k -> h [label=ε];

  # Instruction (`Construct LF`)
  h [shape=circle];
  i [shape=circle];
  l [shape=circle];
  d2 [shape=circle];
  f2 [shape=circle];
  g2 [shape=doublecircle];
  i2 [shape=circle];
  j2 [shape=doublecircle];
  k2 [shape=circle];
  m2 [shape=circle];
  n2 [shape=circle];
  m [shape=doublecircle];
  a -> h [label=ε];
  h -> h [label=<space<br/><font color="red">comma</font>>];
  h -> i [label=<mnemo<br/>val<br/><font color="red">unk</font>>];
  i -> i [label=<mnemo<br/>val<br/>lblref<br/><font color="red">lbldef</font><br/>space<br/><font color="orange">comma</font><br/><font color="red">unk</font>>];
  i -> l [label=lcomment];
  d2 -> m [label=<ε<br/>EOF>];
  l -> m [label=EOF, fontcolor=red];
  l -> d2 [label=LF];
  i -> f2 [label=ε];
  f2 -> j2 [label=<LF<br/><font color="red">EOF</font>>];
  j2 -> j2 [label=<LF<br/>EOF>];
  j2 -> g2 [label=ε];
  g2 -> i2 [label=space, fontcolor=red];
  g2 -> k2 [label=lcomment, fontcolor=red];
  i2 -> g2 [label=LF];
  k2 -> m2 [label=LF];
  k2 -> n2 [label=EOF, fontcolor=red];
  m2 -> n2 [label=<ε<br/>EOF>];

  # One kind of instruction separator.
  t [shape=circle];
  u [shape=circle];
  v [shape=circle];
  z [shape=circle];
  a2 [shape=circle];
  b2 [shape=doublecircle];
  e2 [shape=circle];
  i -> t [label=ε];
  t -> u [label=slash];
  u -> u [label=slash];
  u -> v [label=space];
  v -> u [label=slash, fontcolor=red];

  u -> z [label=ε];
  z -> z [label=space];
  z -> a2 [label=lcomment];
  z -> e2 [label=LF, fontcolor=red];
  a2 -> b2 [label=EOF, fontcolor=red];
  a2 -> e2 [label=LF];
  e2 -> b2 [label=<ε<br/>EOF>];

  # Label (`G_LBL MaybeLF`)
  h -> j [label=<lbldef<br/><font color="red">lblref</font>>];

  subgraph cluster_label_maybelf {
    label="MaybeLF";
    j [shape=circle];
    n [shape=circle];
    o [shape=circle];
    p [shape=circle];
    r [shape=circle];
    h2 [shape=circle];
    s [shape=doublecircle];
    j -> n [label=ε];
    j -> s [label=ε];
    n -> n [label=space];
    n -> o [label=slash];
    n -> p [label=ε];
    o -> p [label=ε];
    o -> s [label=ε];
    p -> p [label=space];
    p -> o [label=slash];
    p -> r [label=lcomment];
    p -> h2 [label=<LF<br/>EOF>];
    r -> h2 [label=LF];
    r -> s [label=EOF, fontcolor=red];
    h2 -> s [label=<ε<br/>EOF>];
    s -> h [label=ε];
  }
}
